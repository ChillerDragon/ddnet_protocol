// THIS FILE IS AUTOGENERATED BY scripts/generate_include.sh

#ifdef BLOAT
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#else
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef int int32_t;
typedef unsigned int uint32_t;
#ifndef _MSC_VER
typedef long unsigned int size_t;
#endif

extern void *memset(void *s, int c, size_t n);
extern void *malloc(size_t size);
extern char *strncpy(char *dest, const char *src, size_t len);
#ifndef strlen
extern size_t strlen(const char *str);
#endif
#endif

#ifndef NULL
#define NULL ((void *)0)
#endif

#define MIN(a, b) (((a) < (b)) ? (a) : (b))

typedef enum {
	ERR_NONE,
	ERR_INVALID_PACKET,
	ERR_INVALID_CONTROL_MESSAGE,
	ERR_INVALID_TOKEN_MAGIC,
	ERR_EMPTY_BUFFER,
} Error;


typedef uint32_t Token;

extern const Token TOKEN_MAGIC;

Token read_token(const uint8_t *buf);

typedef enum {
	CHUNK_FLAG_VITAL = 1,
	CHUNK_FLAG_RESEND,
} ChunkFlag;

typedef struct {
	uint8_t flags;
	uint16_t size;
	uint16_t sequence; // Set only if flags & CHUNK_FLAG_VITAL
} ChunkHeader;

ChunkHeader decode_chunk_header(uint8_t **buf_ptr);


#define PACKET_MIN_HEADER_SIZE 3
#define PACKET_MAX_HEADER_SIZE 1400

typedef enum {
	PACKET_CONNLESS,
	PACKET_CONTROL,
	PACKET_NORMAL,
} PacketKind;

typedef enum {
	PACKET_FLAG_CONTROL = 1 << 2,
	PACKET_FLAG_CONNLESS = 1 << 3,
	PACKET_FLAG_RESEND = 1 << 4,
	PACKET_FLAG_COMPRESSION = 1 << 5,
} PacketFlag;

typedef struct {
	uint16_t flags;
	uint16_t ack;
	uint8_t num_chunks;
} PacketHeader;

PacketHeader decode_packet_header(uint8_t *buf);
PacketKind *decode(uint8_t *buf, size_t len, Error *err);


typedef struct {
	Error err;
	uint8_t *buf_end;
	uint8_t *buf;
} Unpacker;

Unpacker unpacker_new(uint8_t *buf, size_t len);
int32_t unpacker_get_int(Unpacker *state);
const uint8_t *unpacker_get_raw(Unpacker *state, size_t len);


int32_t huffman_compress(const uint8_t *input, size_t input_len, uint8_t *output, size_t output_len);
int32_t huffman_decompress(const uint8_t *input, size_t input_len, uint8_t *output, size_t output_len);
